package me.travis.wurstplus.wurstplustwo.hacks.combat;

import me.travis.wurstplus.wurstplustwo.hacks.WurstplusHack;
import me.travis.wurstplus.wurstplustwo.hacks.WurstplusCategory;
import me.travis.wurstplus.wurstplustwo.guiscreen.settings.WurstplusSetting;
import me.travis.wurstplus.wurstplustwo.util.*;
import me.zero.alpine.fork.listener.EventHandler;
import me.zero.alpine.fork.listener.Listener;
import net.minecraft.block.BlockObsidian;
import net.minecraft.entity.Entity;
import net.minecraft.entity.item.EntityItem;
import net.minecraft.init.Blocks;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.util.EnumHand;
import net.minecraftforge.fml.common.gameevent.TickEvent;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.client.Minecraft;
import net.minecraft.util.math.BlockPos;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import me.travis.wurstplus.wurstplustwo.manager.*;

/**
 * @author Ciruu
 * Updated by noatmc on 23/06/2021
 */

public class WurstplusBurrow extends WurstplusHack {
  WurstplusSetting rotate = new WurstplusSetting("Rotate", "BurrowRotate", false);
  WurstplusSetting offset = new WurstplusSetting("Offset", "BurrowOffset", 7, -20, 20);
  WurstplusSetting sneak = new WurstplusSetting("Sneak", "BurrowSneak", false);

  private BlockPos originalPos;
  private int oldSlot = -1;
  public static final Minecraft mc = Minecraft.getMinecraft();

  public WurstplusBurrow() {
      super(WurstplusCategory.WURSTPLUS_EXPLOIT);

      this.name        = "Instant Burrow";
      this.tag         = "Burrow";
      this.description = "block game exploit";
  }


    @Override
    public void enable() {
        // Save our original pos
        originalPos = new BlockPos(mc.player.posX, mc.player.posY, mc.player.posZ);

        // If we can't place in our actual post then this.set_disable and return
        if (mc.world.getBlockState(new BlockPos(mc.player.posX, mc.player.posY, mc.player.posZ)).getBlock().equals(Blocks.OBSIDIAN) ||
                intersectsWithEntity(this.originalPos)) {
            this.set_disable();
            return;
        }

        // Save our item slot
        oldSlot = mc.player.inventory.currentItem;
    }
    @SubscribeEvent
    public void onTick(TickEvent.ClientTickEvent event) {
      // If we don't have obsidian in hotbar this.set_disable and return
      if (WurstplusBurrowUtil.findHotbarBlock(BlockObsidian.class) == -1) {
          WurstplusMessageUtil.send_client_message("Can't find obsidian in hotbar!");
          this.set_disable();
          return;
      }

      // Change to obsidian slot
      WurstplusBurrowUtil.switchToSlot(WurstplusBurrowUtil.findHotbarBlock(BlockObsidian.class), false);

      // Fake jump
      mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY + 0.41999998688698D, mc.player.posZ, true));
      mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY + 0.7531999805211997D, mc.player.posZ, true));
      mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY + 1.00133597911214D, mc.player.posZ, true));
      mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY + 1.16610926093821D, mc.player.posZ, true));

      // Sneak option.
      boolean sneaking = mc.player.isSneaking();
      if (this.sneak.get_value(true)) {
          if (sneaking) {
              mc.player.connection.sendPacket(new CPacketEntityAction(mc.player, START_SNEAKING));
          }
      }

      // Place block
      WurstplusBurrowUtil.placeBlock(originalPos, EnumHand.MAIN_HAND, this.rotate.get_value(true), true, false);

      // Rubberband
      mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY + this.offset.get_value(true), mc.player.posZ, false));

      // SwitchBack
      WurstplusBurrowUtil.switchToSlot(oldSlot, false);

      // Stop sneak if the option was enabled.
      if (this.sneak.get_value(true)) {
          if (sneaking) {
              mc.player.connection.sendPacket(new CPacketEntityAction(mc.player, STOP_SNEAKING));
          }
      }
      // AutoDisable
      this.set_disable();
  }
    private boolean intersectsWithEntity(final BlockPos pos) {
        for (final Entity entity : mc.world.loadedEntityList) {
            if (entity.equals(mc.player)) continue;
            if (entity instanceof EntityItem) continue;
            if (new AxisAlignedBB(pos).intersects(entity.getEntityBoundingBox())) return true;
        }
        return false;
    }
}
